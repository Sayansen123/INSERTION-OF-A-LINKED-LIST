//SAYAN SEN SHARMA
//1ST SEM
//MSC IN DATA SCIENCE
//IMPLEMENT A DOUBLY LINKED LIST







#include <stdio.h>
#include <stdlib.h>
struct node
	{
	int data;
	struct node*next;
	struct node*prev;
    };
    //get node
    struct node* getnode()
    {
    	struct node*node;
    	node=(struct node*)malloc(sizeof(struct node));
    	if(node==NULL)
    	{
    		printf("overflow condition\n");
		}
		else
		{
			return node;
		}
	}
    // traverse
    struct node* traverse(struct node*head)
    {
struct node*temp;
	temp=head;
	if(head==NULL)
	{
		printf("list is empty\n");
	}
	else
	{
	while(temp!=NULL)
	{
	printf("%d\n",temp->data);
	temp=temp->next; 
}
}
return head;
}
//create a linked list
   struct node* createalinkedlist(struct node*head)
{
    struct node*newnode,*temp;
    int choice=1;
	while(choice)
	{
	newnode=getnode();
    printf("enter data ");
    scanf("%d",&newnode->data);
    newnode->next=NULL;
    newnode->prev=NULL;
    if(head==NULL)
	{
		head=temp=newnode;
	}
	else
	{
		temp->next=newnode;
		newnode->prev=temp;
		temp=newnode;
    }
	printf("do you want to continue((0,1?))press'1'for yes and '0'for no ");
	scanf("%d",&choice);
	while (choice!=0&&choice!=1)
	{
		printf("insufficient data");
	}
}
return head;
}
//insert at beginning
struct node* insertionbeg(struct node*head)
{
	struct node*newnode,*temp;
	temp=head;
	newnode=getnode();
	printf("enter data ");
	scanf("%d",&newnode->data);
	newnode->next=head;
	newnode->prev=NULL;
	temp->prev=newnode;
	head=newnode;
	return head;
}
//insert at end
struct node* insertionend(struct node*head)
{
	struct node*newnode,*temp;
	newnode=getnode();
	printf("enter data ");
	scanf("%d",&newnode->data);
	newnode->next=NULL;
	temp=head;
	while(temp->next!=NULL)
	{
		temp=temp->next;
	}
	newnode->prev=temp;
	temp->next=newnode;
	return head;
}
//insert at any position
struct node* insertany(struct node*head)
{
		struct node*temp,*newnode,*temp1;
int i=2,choice;
newnode=getnode();
printf("enter choice ");
scanf("%d",&choice);
	temp=head;
		if(choice==1)
	{
		head=insertionbeg(head);
	}
	else
	{
	while(i<choice)
	{
	i++;
	temp=temp->next;
}
temp1=temp->next;
printf("enter data ");
scanf("%d",&newnode->data);
newnode->next=temp->next;
temp1->prev=newnode;
newnode->prev=temp;
temp->next=newnode;
}
return head;
}
//delete from beginning
struct node* delbeg(struct node*head)
{
	struct node*temp;
	if(head==NULL)
	{
		printf("list is empty\n");
	}
	else
	{
		temp=head;
		head=head->next;
		head->prev=NULL;
		free(temp);
}
return head;
}
//delete from end
 struct node* delend(struct node*head)
{
	struct node*temp,*previous;
	temp=head;
	while(temp->next!=NULL)
	{
		previous=temp;
		temp=temp->next;
	}
	previous->next=NULL;
	free(temp);
	return head;
}
//delete from specific position
struct node* delspec(struct node*head)
{
	struct node*temp,*previous,*temp1;
	int choice,i=1;
	temp=head;
	printf("enter your choice ");
	scanf("%d",&choice);
	if(choice==1)
	{
		head=delbeg(head);
	}
	else
	{
	while(i<choice)
	{
	previous=temp;
	temp=temp->next;
	temp1=temp->next;
	i++;
}
if(temp1!=NULL)
{
previous->next=temp->next;
temp1->prev=previous;
free(temp);
}
else
{
	head=delend(head);
}
}
return head;
}
//reverse
struct node* reverse(struct node*head)
{
	struct node*prevnode,*temp,*nextnode;
	prevnode=NULL;
	temp=nextnode=head;
	while(nextnode!=NULL)
	{
		nextnode=nextnode->next;
		temp->next=prevnode;
		temp->prev=nextnode;
		prevnode=temp;
		temp=nextnode;
	}
	head=prevnode;
	return head;
}
//sorting
struct node* sort(struct node*head)
{
struct node *prenode,*nextnode;
int temp;
prenode=head;
while(prenode->next!=NULL)
{
	nextnode=prenode->next;
	while(nextnode!=NULL)
	{
		if(prenode->data>nextnode->data)
		{
			temp=nextnode->data;
			nextnode->data=prenode->data;
			prenode->data=temp;
		}
		nextnode=nextnode->next;
	}
	prenode=prenode->next;
}
return head;
}
//concatenation of linked list
struct node* concatenate(struct node*head,struct node*head1,struct node*head2)
{
	struct node*temp;
temp=head1;
while(temp->next!=NULL)
{
	temp=temp->next;
}
temp->next=head2;
head2->prev=temp;
return head1;
}
int main()
{
	int choice,choice1,choice2;
	struct node*head=NULL;
	struct node*head1=NULL;
	struct node*head2=NULL;
	while(1)
	{
	printf("enter 1 for create a linked list\n");
	printf("enter 2 for traverse\n");
	printf("enter 3 for insert\n");
	printf("enter 4 for delete\n");
	printf("enter 5 for sorting\n");
	printf("enter 6 for reverse\n");
	printf("enter 7 for concatenation\n");
	printf("enter 8 to end the loop\n");
	printf("enter your choice ");  
	scanf("%d",&choice);
	switch(choice)
	{
		case 1:head=createalinkedlist(head);
		break;
		case 2:head=traverse(head);
		break;
			case 3:
			printf("enter 1 for insert beginning\n");
			printf("enter 2 for insert end\n");
			printf("enter 3 for insert at any position\n");
			printf("enter your choice ");
			scanf("%d",&choice1);
			switch(choice1)
			{
				case 1:head=insertionbeg(head);
				break;
				case 2:head=insertionend(head);
				break;
		        case 3:head=insertany(head);
		        break;
		        	default:
					break;
			}
			break;
			case 4:
			printf("enter 1 for delte from beginning\n");
			printf("enter 2 for delete from end\n");
			printf("enter 3 for delete from any position\n");
			printf("enter your choice ");
			scanf("%d",&choice2);
			switch(choice2)
			{
				case 1:head=delbeg(head);
				break;
				case 2:head=delend(head);
				break;
				case 3:head=delspec(head);
				break;
				default:
					break;
	}
	break;
	case 5:head=sort(head);
	break;
	case 6:head=reverse(head);
	break;
	case 7:
		printf("create 1st linked list\n");
		    head1=createalinkedlist(head1);
		    printf("create 2nd linked list\n");
		    head2=createalinkedlist(head2);
		    head=concatenate(head,head1,head2);
			break;
		case 8:exit(1);
		break;	
		default:
		break;	
}
	}
	return 0;
}
